
import java.util.Calendar;
import java.util.HashMap;

public final class ProductCriteria {

	HashMap<String, String> criteria = new HashMap<String, String>();

	static {

	}

	public ProductCriteria() {
		// Criteria providing the total expected number of products
		criteria.put("total_expected", "");
		// Criteria providing the rate of the production for the particular
		// product, e.g. 15mins, 1hr, 24hr, etc
		criteria.put("production_rate", "");
		// Criteria providing the expected start time for the generation of the
		// product data
		criteria.put("start_time", "");
		// Criteria providing the expected stop of the generation of the product
		// data
		criteria.put("end_time", "");
		// Criteria that sets the number of data generated by each production,
		// e.g. 3 files every 1hr
		criteria.put("data_number", "");
		// Criteria that sets the minimum size of files for the specific product
		criteria.put("minimum_size", "");
	}

	public static HsafProductStatus getProduct(String prod,
			Calendar processingDate) {
		if (prod.equals(Products.H01)) {
			return new HsafProductStatus(Products.H01, processingDate, 12, 240, 6, 0, 1,
					200);
		} 
//		else if (prod.equals(H02)) {
//			return new HsafProductStatus(H02, processingDate, 38, 200, 99, 99,
//					1, 50000);
//		} 
		else if (prod.equals(Products.H02B)) {
			return new HsafProductStatus(Products.H02B, processingDate, 38, 120, 99, 99,
					1, 50000);
		}

		// } else if (prod.equals(H03)) {
		// return new HsafProductStatus(H03, processingDate, 86, 45, 99, 99, 1,
		// 15000);
		// }
		else if (prod.equals(Products.H03B)) {
			return new HsafProductStatus(Products.H03B, processingDate, 86, 45, 99, 99,
					1, 15000);
		} else if (prod.equals(Products.H04)) {
			return new HsafProductStatus(Products.H04, processingDate, 42, 80, 99, 99,
					1, 1000);
		}
		// else if (prod.equals(H05)) {
		// return new HsafProductStatus(H05, processingDate, 28, 210, 99, 99, 1,
		// 50000);
		// }
		else if (prod.equals(Products.H05B)) {
			return new HsafProductStatus(Products.H05B, processingDate, 28, 210, 99, 99,
					1, 50000);
		} else if (prod.equals(Products.H17)) {
			return new HsafProductStatus(Products.H17, processingDate, 75, 30, 99, 99,
					1, 1400000);
		} else if (prod.equals(Products.H18)) {
			return new HsafProductStatus(Products.H18, processingDate, 75, 30, 99, 99,
					1, 1400000);
		} else if (prod.equals(Products.H08)) {
			return new HsafProductStatus(Products.H08, processingDate, 30, 360, 8, 23,
					1, 100);
		} else if (prod.equals(Products.H10)) {
			return new HsafProductStatus(Products.H10, processingDate, 1, 1500, 99, 99,
					1, 1400000);
		} else if (prod.equals(Products.H11)) {
			return new HsafProductStatus(Products.H11, processingDate, 1, 1500, 99, 99,
					1, 4500);
		} else if (prod.equals(Products.H12)) {
			return new HsafProductStatus(Products.H12, processingDate, 2, 1500, 19, 23,
					1, 400000);
		} else if (prod.equals(Products.H13)) {
			return new HsafProductStatus(Products.H13, processingDate, 2, 1500, 7, 9, 1,
					2000);
		} else if (prod.equals(Products.H14)) {
			return new HsafProductStatus(Products.H14, processingDate, 1, 3600, 99, 99,
					1, 1800000);
		} else if (prod.equals(Products.H15)) {
			return new HsafProductStatus(Products.H15, processingDate, 86, 45, 99, 99,
					1, 5000);
		} else if (prod.equals(Products.H16)) {
			return new HsafProductStatus(Products.H16, processingDate, 470, 90, 99, 99,
					1, 45000);
		} else if (prod.equals(Products.H101)) {
			return new HsafProductStatus(Products.H101, processingDate, 470, 90, 99, 99,
					1, 45000);
		} else if (prod.equals(Products.H102)) {
			return new HsafProductStatus(Products.H102, processingDate, 470, 90, 99, 99,
					1, 170000);
		} else if (prod.equals(Products.H103)) {
			return new HsafProductStatus(Products.H103, processingDate, 470, 90, 99, 99,
					1, 170000);
		}
		return null;
	}

	public HashMap<String, String> getCriteria(String prod) {
		if (prod.equals(Products.H01)) {
			criteria.put("total_expected", "12");
			criteria.put("production_rate", "240");
			criteria.put("start_time", "06");
			criteria.put("end_time", "00");
			criteria.put("data_number", "1");
			criteria.put("minimum_size", "2000");
		
//		else if (prod.equals(H02)) {
//			// ****** GG-NOTE (13/11/2018) ******
//			// total_expected changed from 60 to 38 after noaa18 instrument
//			// failure
//			// criteria.put("total_expected", "60");
//			criteria.put("total_expected", "38");
//			// GG 01/07/2019:
//			// production rate changed from 150 to 200 
//			// request by D. Melfi
//			criteria.put("production_rate", "200");
//			criteria.put("start_time", "99");
//			criteria.put("end_time", "99");
//			criteria.put("data_number", "1");
//			criteria.put("minimum_size", "50000");
		} else if (prod.equals(Products.H02B)) {
			// ****** GG-NOTE (13/11/2018) ******
			// total_expected changed from 50 to 38 after noaa18 instrument
			// failure
			// criteria.put("total_expected", "50");
			criteria.put("total_expected", "38");
			criteria.put("production_rate", "120");
			criteria.put("start_time", "99");
			criteria.put("end_time", "99");
			criteria.put("data_number", "1");
			criteria.put("minimum_size", "50000");
		}
		// H03A dismissed starting from 11/04/2019
		// else if (prod.equals(H03)) {
		// criteria.put("total_expected", "86");
		// criteria.put("production_rate", "45");
		// criteria.put("start_time", "99");
		// criteria.put("end_time", "99");
		// criteria.put("data_number", "1");
		// criteria.put("minimum_size", "15000");
		// }
		else if (prod.equals(Products.H03B)) {
			criteria.put("total_expected", "86");
			criteria.put("production_rate", "45");
			criteria.put("start_time", "99");
			criteria.put("end_time", "99");
			criteria.put("data_number", "1");
			criteria.put("minimum_size", "15000");
		} else if (prod.equals(Products.H04)) {
			criteria.put("total_expected", "42");
			criteria.put("production_rate", "80");
			criteria.put("start_time", "99");
			criteria.put("end_time", "99");
			criteria.put("data_number", "1");
			criteria.put("minimum_size", "1000");
		}
		// H05A dismissed starting from 11/04/2019
		// else if (prod.equals(H05)) {
		// criteria.put("total_expected", "28");
		// criteria.put("production_rate", "210");
		// criteria.put("start_time", "99");
		// criteria.put("end_time", "99");
		// criteria.put("data_number", "1");
		// criteria.put("minimum_size", "50000");
		// }
		else if (prod.equals(Products.H05B)) {
			criteria.put("total_expected", "28");
			criteria.put("production_rate", "210");
			criteria.put("start_time", "99");
			criteria.put("end_time", "99");
			criteria.put("data_number", "1");
			criteria.put("minimum_size", "50000");
		} else if (prod.equals(Products.H08)) {
			criteria.put("total_expected", "30");
			criteria.put("production_rate", "360");
			criteria.put("start_time", "08");
			criteria.put("end_time", "23");
			criteria.put("data_number", "1");
			criteria.put("minimum_size", "100");
		} else if (prod.equals(Products.H10)) {
			criteria.put("total_expected", "1");
			criteria.put("production_rate", "1500");
			criteria.put("start_time", "99");
			criteria.put("end_time", "99");
			criteria.put("data_number", "1");
			criteria.put("minimum_size", "1400000");
		} else if (prod.equals(Products.H11)) {
			criteria.put("total_expected", "1");
			criteria.put("production_rate", "1500");
			criteria.put("start_time", "99");
			criteria.put("end_time", "99");
			criteria.put("data_number", "1");
			criteria.put("minimum_size", "4500");
		} else if (prod.equals(Products.H12)) {
			criteria.put("total_expected", "2");
			criteria.put("production_rate", "1500");
			criteria.put("start_time", "19");
			criteria.put("end_time", "23");
			criteria.put("data_number", "1");
			criteria.put("minimum_size", "400000");
		} else if (prod.equals(Products.H13)) {
			criteria.put("total_expected", "2");
			criteria.put("production_rate", "1500");
			criteria.put("start_time", "07");
			criteria.put("end_time", "09");
			criteria.put("data_number", "1");
			criteria.put("minimum_size", "2000");
		} else if (prod.equals(Products.H14)) {
			criteria.put("total_expected", "1");
			criteria.put("production_rate", "3600");
			criteria.put("start_time", "99");
			criteria.put("end_time", "99");
			criteria.put("data_number", "1");
			criteria.put("minimum_size", "1800000");
		} else if (prod.equals(Products.H15)) {
			criteria.put("total_expected", "86");
			criteria.put("production_rate", "45");
			criteria.put("start_time", "99");
			criteria.put("end_time", "99");
			criteria.put("data_number", "1");
			criteria.put("minimum_size", "5000");
		} else if (prod.equals(Products.H16)) {
			criteria.put("total_expected", "470");
			criteria.put("production_rate", "90");
			criteria.put("start_time", "99");
			criteria.put("end_time", "99");
			criteria.put("data_number", "1");
			criteria.put("minimum_size", "45000");
		} else if (prod.equals(Products.H101)) {
			criteria.put("total_expected", "470");
			criteria.put("production_rate", "90");
			criteria.put("start_time", "99");
			criteria.put("end_time", "99");
			criteria.put("data_number", "1");
			criteria.put("minimum_size", "45000");
		} else if (prod.equals(Products.H102)) {
			criteria.put("total_expected", "470");
			criteria.put("production_rate", "90");
			criteria.put("start_time", "99");
			criteria.put("end_time", "99");
			criteria.put("data_number", "1");
			criteria.put("minimum_size", "170000");
		} else if (prod.equals(Products.H103)) {
			criteria.put("total_expected", "470");
			criteria.put("production_rate", "90");
			criteria.put("start_time", "99");
			criteria.put("end_time", "99");
			criteria.put("data_number", "1");
			criteria.put("minimum_size", "170000");
		}

		return criteria;
	}

}
